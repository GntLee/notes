--------------------
项目属性			|
--------------------
	# 定义在项目上面

	# 项目的位置
		grid-column-start
			* 左边框所在的垂直网格线
		grid-column-end
			* 右边框所在的垂直网格线
		grid-row-start
			* 上边框所在的水平网格线
		grid-row-end
			* 边框所在的水平网格线
		
			grid-column-start: 2;
			grid-column-end: 4; /* 这个项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。*/
		
		* 如果不设置，则依赖容器的grid-auto-flow属性决定
		

		* 除了指定为第几个网格线，还可以指定为网格线的名字。
			grid-column-start: header-start;
			grid-column-end: header-end;
		
		
		* 以使用span关键字，表示"跨越"，即左右边框（上下边框）之间跨越多少个网格
			grid-column-start: span 2;
		
		
		* 使用这四个属性，如果产生了项目的重叠，则使用z-index属性指定项目的重叠顺序。

		* 简写
			grid-column
				* grid-column-start和grid-column-end的合并简写形式
					grid-column: 1 / 3;

			grid-row
				* grid-row-start属性和grid-row-end的合并简写形式
					  grid-row: 1 / 2;
			
			* 也可以使用span关键字，表示跨越多少个网格。
				grid-column: 1 / span 2;
				grid-row: 1 / span 2;

			* 斜杠以及后面的部分可以省略，默认跨越一个网格
		

		
	# 项目的区域
		grid-area
			* 指定项目放在哪一个区域。
				grid-area: e;
		

		* 还可用作grid-row-start、grid-column-start、grid-row-end、grid-column-end的合并简写形式，直接指定项目的位置。
			grid-area: <row-start> / <column-start> / <row-end> / <column-end>;

			grid-area: 1 / 1 / 3 / 3;
		
	
	# 单元格内容的水平位置
		justify-self
			* 设置单元格内容的水平位置（左中右）

		align-self
			* 设置单元格内容的垂直位置（上中下）
		
		* 枚举值
			start：对齐单元格的起始边缘。
			end：对齐单元格的结束边缘。
			center：单元格内部居中。
			stretch：拉伸，占满单元格的整个宽度（默认值）。
	
		
		* 简写
			place-self
				* align-self属性和justify-self属性的合并简写形式
					place-self: <align-self> <justify-self>;
				* 如果省略第二个值，place-self属性会认为这两个值相等。
		

				
					



				