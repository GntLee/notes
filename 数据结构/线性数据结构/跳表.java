--------------------------
跳表
--------------------------
	# 是基于链表的一种3数据结构, 主要是对于一个需要频繁删除的线性有序结构, 提升插入/删除的速度
		* 优点
			对于单向链表, 只能从头到尾遍历, 时间复杂度为O(n)
			对于数组, 删除插入复杂度太高O(n), 还会涉及数组的扩容操作
			平衡二叉树查询速度很快, 但是需要平衡的操作开销很大
			红黑树的话, 性能差不多, 但是如果需要多进程同时访问修改的话, 红黑树有个平衡的过程, 争锁代价也比较大
			跳表的线程安全也是通过cas锁实现的, 跳表的构建相对简单, 同时支持范围查找
		缺点：
			相对于红黑树，空间消耗增加	
	
	# 数据结构表示
		[索引]  1->         5
		[索引]  1->	  3->   5->   7
		[数据]	1->2->3->4->5->6->7->8->9


	# 查询
		* 查找的过程总结为一条二元表达式
			下一个是否大于结果 ? 下一个 : 下一层）
	
	# 插入
		* 插入的时候, 首先要进行查询, 然后从最底层开始, 插入被插入的元素
		* 然后看看从下而上, 是否需要逐层插入
		
		* 可是到底要不要插入上一层呢? 我们都知道, 我们想每层的跳跃都非常高效, 越是平衡就越好(第一层1级跳, 第二层2级跳, 第3层4级跳, 第4层8级跳)
		* 但是用算法实现起来，确实非常地复杂的，并且要严格地按照2地指数次幂，我们还要对原有地结构进行调整。
		* 所以跳表的思路是抛硬币, 听天由命, 产生一个随机数, 50%概率再向上扩展, 否则就结束
		* 这样子, 每一个元素能够有X层的概率为0.5^(X-1)次方, 反过来, 第X层有多少个元素的数学期望


	# 删除
		* 同插入一样, 删除也是先查找, 查找到了之后, 再从下往上逐个删除, 比较简单, 就不再赘叙



