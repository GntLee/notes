--------------------
稀疏数组			|
--------------------
	# 当一个数组的大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存该数组

	# 处理方法
		1，记录数组一共有几个列，有多少个不同值
		2，把具有不同值的元素的行列记录在一个小规模的数组中，从而缩小程序的规模
	
	
	
	
	# 演示
		[[ 0][ 0][ 0][22][ 0][ 0][15]]
		[[ 0][11][ 0][ 0][ 0][17][ 0]]
		[[ 0][ 0][ 0][-6][ 0][ 0][ 0]]
		[[ 0][ 0][ 0][ 0][ 0][39][ 0]]
		[[91][ 0][ 0][ 0][ 0][ 0][ 0]]
		[[ 0][ 0][28][ 0][ 0][ 0][ 0]]

	

		[[ 6][ 7][ 8]]
			* 6 表示有6行
			* 7 表示有7列
			* 8 表示一共有8个数据（非0）

		[[ 0][ 3][22]]
			* 0 表示第0行
			* 3 表示第3个角标
			* 22 表示第0行第3个角标的值是22
			
		[[ 0][ 6][15]]
			* 0 表示第0行
			* 6 表示第6个角标
			* 15 表示第0行第6个角标的值是22

		[[ 1][ 1][11]]
		[[ 1][ 5][17]]
		[[ 2][ 3][-6]]
		[[ 3][ 5][39]]
		[[ 4][ 0][91]]
		[[ 5][ 2][28]]
	
		

		* 稀疏数组一般只有3列。
		* 第一行3个元素分表表示，表示原始数组的行数，列数，有效数据量

		* 第二行开始，使用一行来表示原始数组的一个原数
		* 下标0，表示在第几行(row)，下标1表示在第几列(col)，下标2表示有效的数据值(value)
	

--------------------
稀疏数组的压缩与还原|
--------------------
	# 压缩原始数组为稀疏数组
		* 遍历原始的二维数组，获取到有效的数据个数（sum）
		* 根据sum就可以创建稀疏数组： int[sum + 1][3]
		
		* 把二维数组的有效数据存储到稀疏数组


	# 还原稀疏数组为原始数组
		* 读取稀疏数组的第一行，获取到原始数组的行，列信息
		* 根据行和列创建原始数组
		* 遍历稀疏数组，把数据赋值到原始数组
	

		

--------------------
python实现			|
--------------------
def compressed_array(arr):
    # 有效的数据量
    count = 0
    for i in arr:
        for x in i:
            if x != 0:
                count += 1

    # 列数
    col = len(arr)

    # 行数
    row = len(arr[0])

    # 稀疏数组
    ret = []

    # 初始化元信息
    meta_info = [col, row, count]
    ret.append(meta_info)

    # 遍历有效数据
    for i, v in enumerate(arr):
        for x, z in enumerate(v):
            if z != 0:
                data_info = [i, x, z]
                ret.append(data_info)

    return ret


def decompression_array(arr):

    ret = []

    # 行数
    col = arr[0][0]

    # 列数
    row = arr[0][1]

    for i in range(col):
        # 初始化子数组
        sub_arr = [0 for i in range(row)]
        ret.append(sub_arr)

    for i, sub_arr in enumerate(arr):
        # 忽略第一行元数据
        if i != 0:
            ret[sub_arr[0]][sub_arr[1]] = sub_arr[2]

    return ret


result = compressed_array([[0, 0, 0, 22, 0, 0, 15],
                        [0, 11, 0, 0, 0, 17, 0],
                        [0, 0, 0, -6, 0, 0, 0],
                        [0, 0, 0, 0, 0, 39, 0],
                        [91, 0, 0, 0, 0, 0, 0],
                        [0, 0, 28, 0, 0, 0, 0]])

print(result)


result = decompression_array(result)

print(result)
