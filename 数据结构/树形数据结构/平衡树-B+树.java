-----------------
B+Tree			 |
-----------------
	# 多路，平衡二叉树
	# MYSQL INNODB引擎存储索引使用的数据结构

	# B+树索引
		* B树,是一个多路平衡查找树,相较于普通的二叉树,不会发生极度不平衡的状况,同时也是多路的
		* 他会将数据也保存在非页子节点
		* B+ 树的高度在 2-4 层, 由 MySql 在运行时, 根节点是常驻内存的, 因此每次查找只需要大约 2 -3 次 IO
		* 可以说, B+ 树的设计, 就是根据机械磁盘的特性来进行设计的

		* 如果B+树只有1层, 也就是只有1个用于存放用户记录的节点, 最多能存放1000条记录
		* 如果B+树有2层, 最多能存放1000×1000=1000000条记录
		* 如果B+树有3层, 最多能存放1000×1000×1000=1000000000条记录
		* 如果B+树有4层, 最多能存放1000×1000×1000×1000=1000000000000条记录
		* 表里需要存放1000000000000条记录么?所以一般情况下, 用到的B+树都不会超过4层
		* 通过主键去查找某条记录最多只需要做4个页面内的查找, 又因为在每个页面内有所谓的Page Directory, 所以在页面内也可以通过二分法实现快速定位记录
		
		* B+树中每层节点(数据页)都是按照索引列值从小到大的顺序排序而组成了双向链表
		* 每个页内的记录(不论是用户记录还是目录项记录)都是按照索引列的值从小到大的顺序而形成了一个单链表

		* MySql 的主键不能太大, 如果使用 UUID 这种,将会浪费 B+ 树的非叶子节点
		* MySql 的主键最好是自增的, 如果使用 UUID 这种, 每次插入都会调整 B+树, 从而导致页分裂, 严重影响性能


	

	# 为什么不使用红黑树(平衡二叉树)
		* 搜索性能不足, 在树结构中数据的深度决定着它搜索时的io次数
		* 节点数据内容太少, 每一个磁盘块(节点/页), 保存的关键字数量太少了
			* 没有很好的利用操作系统和磁盘的数据交换特性和磁盘预读能力(空间局部性原理)
			* 磁盘和操作系统的一次io交互, 一次是一个页(单位是页), 一页是4kb

		* 红黑树每个节点只能村存储一个数据, 需要一次性加载到内存进行比较. 通俗理解就是, 一次与磁盘的交互, 只能进行一次比较
		* 而B+Tree, 一次与磁盘的交互, 可以进行N次比较, 因为BTree一个节点, 有N多数据, 可以一次性加载到内存,  在内存中进行N次比较效率比多次IO磁盘后进行比较要快