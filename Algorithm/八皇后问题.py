---------------------
八皇后的问题		 |
---------------------
	# 八皇后的问题
		* 在8 x 8格的国际象棋上摆放8个皇后
		* 任意两个皇后都不能处于相同一行, 一列, 或者一个斜线上
		* 一共有多少种摆法(92种)

		* 回溯算法的经典案例

	# 解题思路
		1. 先把第一个皇后放在第1行, 第1列
		2. 第二个皇后放在第2行第1列,  判断是否OK
			* 如果不OK, 继续放在第2列, 第3列
			* 直到所有的列都放完, 找到一个合适的
		
		3. 第三个皇后, 放在第3行, 第一列, 判断是否OK,
			* 如果不OK, 继续放在第2列, 第3列
			* 直到所有的列都放完, 找到一个合适的
		
		4. 当得到一个正确的解时, 在栈上回退到上一个栈时, 就会开始回溯
			* 把第1个皇后, 放到第一列的所有正确解, 全部得到
		
		5. 然后回头继续第一个皇后放到第2列, 后面继续循环 1,2,3 步骤


		* 理论上来说, 应该创建一个二维数组来表示棋盘, 但是实际上可以通过算法使用一个一维数组表示
			arr = [0, 4, 7, 5, 2, 6, 1, 3]
			
			* 下标(i)表示第几行, 也就是第几(i + 1)个皇后, 第几个皇后, 就是第几行
			* 下标的值, 表示 (i + 1) 个皇后, 放在arr[i] + 1列

			* 第(i + 1)个皇后, 放在(i + 1) 行的, arr[i] + 1列
	

---------------------
python实现			 |
---------------------


count = 0

operation_count = 0

arr_length = 8

arr = [0 for i in range(arr_length)]


# 当前放置的第n个皇后后，判断该皇后是否和前面已经摆放的皇后冲突
def judge(n):
    global arr
    global operation_count
    operation_count += 1
    for i in range(n):
        if arr[i] == arr[n]:
            # 同一列
            return False
        if abs(n - i) == abs(arr[n] - arr[i]):
            # 同一个斜线
            return False
    return True


# 放置皇后
def check(n):
    global arr
    global count
    if n == arr_length:
        # 最后一个皇后，打印这种解法
        print(arr)
        count += 1
        return
    # 依次放入皇后，并且判断是否符合条件
    for i in range(arr_length):
        arr[n] = i
        if judge(n):
            # 不冲突，递归执行
            check(n + 1)
        '''
        冲突，继续执行 arr[n] = i。
        也就是把第n个皇后，放置在本行的后一个位置
        '''


check(0)

# 92 种解法
print(count)
# 执行了 15720 次计算
print(operation_count)

'''
[0, 4, 7, 5, 2, 6, 1, 3]
[0, 5, 7, 2, 6, 3, 1, 4]
[0, 6, 3, 5, 7, 1, 4, 2]
[0, 6, 4, 7, 1, 3, 5, 2]
[1, 3, 5, 7, 2, 0, 6, 4]
[1, 4, 6, 0, 2, 7, 5, 3]
[1, 4, 6, 3, 0, 7, 5, 2]
[1, 5, 0, 6, 3, 7, 2, 4]
[1, 5, 7, 2, 0, 3, 6, 4]
[1, 6, 2, 5, 7, 4, 0, 3]
[1, 6, 4, 7, 0, 3, 5, 2]
[1, 7, 5, 0, 2, 4, 6, 3]
[2, 0, 6, 4, 7, 1, 3, 5]
[2, 4, 1, 7, 0, 6, 3, 5]
[2, 4, 1, 7, 5, 3, 6, 0]
[2, 4, 6, 0, 3, 1, 7, 5]
[2, 4, 7, 3, 0, 6, 1, 5]
[2, 5, 1, 4, 7, 0, 6, 3]
[2, 5, 1, 6, 0, 3, 7, 4]
[2, 5, 1, 6, 4, 0, 7, 3]
[2, 5, 3, 0, 7, 4, 6, 1]
[2, 5, 3, 1, 7, 4, 6, 0]
[2, 5, 7, 0, 3, 6, 4, 1]
[2, 5, 7, 0, 4, 6, 1, 3]
[2, 5, 7, 1, 3, 0, 6, 4]
[2, 6, 1, 7, 4, 0, 3, 5]
[2, 6, 1, 7, 5, 3, 0, 4]
[2, 7, 3, 6, 0, 5, 1, 4]
[3, 0, 4, 7, 1, 6, 2, 5]
[3, 0, 4, 7, 5, 2, 6, 1]
[3, 1, 4, 7, 5, 0, 2, 6]
[3, 1, 6, 2, 5, 7, 0, 4]
[3, 1, 6, 2, 5, 7, 4, 0]
[3, 1, 6, 4, 0, 7, 5, 2]
[3, 1, 7, 4, 6, 0, 2, 5]
[3, 1, 7, 5, 0, 2, 4, 6]
[3, 5, 0, 4, 1, 7, 2, 6]
[3, 5, 7, 1, 6, 0, 2, 4]
[3, 5, 7, 2, 0, 6, 4, 1]
[3, 6, 0, 7, 4, 1, 5, 2]
[3, 6, 2, 7, 1, 4, 0, 5]
[3, 6, 4, 1, 5, 0, 2, 7]
[3, 6, 4, 2, 0, 5, 7, 1]
[3, 7, 0, 2, 5, 1, 6, 4]
[3, 7, 0, 4, 6, 1, 5, 2]
[3, 7, 4, 2, 0, 6, 1, 5]
[4, 0, 3, 5, 7, 1, 6, 2]
[4, 0, 7, 3, 1, 6, 2, 5]
[4, 0, 7, 5, 2, 6, 1, 3]
[4, 1, 3, 5, 7, 2, 0, 6]
[4, 1, 3, 6, 2, 7, 5, 0]
[4, 1, 5, 0, 6, 3, 7, 2]
[4, 1, 7, 0, 3, 6, 2, 5]
[4, 2, 0, 5, 7, 1, 3, 6]
[4, 2, 0, 6, 1, 7, 5, 3]
[4, 2, 7, 3, 6, 0, 5, 1]
[4, 6, 0, 2, 7, 5, 3, 1]
[4, 6, 0, 3, 1, 7, 5, 2]
[4, 6, 1, 3, 7, 0, 2, 5]
[4, 6, 1, 5, 2, 0, 3, 7]
[4, 6, 1, 5, 2, 0, 7, 3]
[4, 6, 3, 0, 2, 7, 5, 1]
[4, 7, 3, 0, 2, 5, 1, 6]
[4, 7, 3, 0, 6, 1, 5, 2]
[5, 0, 4, 1, 7, 2, 6, 3]
[5, 1, 6, 0, 2, 4, 7, 3]
[5, 1, 6, 0, 3, 7, 4, 2]
[5, 2, 0, 6, 4, 7, 1, 3]
[5, 2, 0, 7, 3, 1, 6, 4]
[5, 2, 0, 7, 4, 1, 3, 6]
[5, 2, 4, 6, 0, 3, 1, 7]
[5, 2, 4, 7, 0, 3, 1, 6]
[5, 2, 6, 1, 3, 7, 0, 4]
[5, 2, 6, 1, 7, 4, 0, 3]
[5, 2, 6, 3, 0, 7, 1, 4]
[5, 3, 0, 4, 7, 1, 6, 2]
[5, 3, 1, 7, 4, 6, 0, 2]
[5, 3, 6, 0, 2, 4, 1, 7]
[5, 3, 6, 0, 7, 1, 4, 2]
[5, 7, 1, 3, 0, 6, 4, 2]
[6, 0, 2, 7, 5, 3, 1, 4]
[6, 1, 3, 0, 7, 4, 2, 5]
[6, 1, 5, 2, 0, 3, 7, 4]
[6, 2, 0, 5, 7, 4, 1, 3]
[6, 2, 7, 1, 4, 0, 5, 3]
[6, 3, 1, 4, 7, 0, 2, 5]
[6, 3, 1, 7, 5, 0, 2, 4]
[6, 4, 2, 0, 5, 7, 1, 3]
[7, 1, 3, 0, 6, 4, 2, 5]
[7, 1, 4, 2, 0, 6, 3, 5]
[7, 2, 0, 5, 1, 4, 6, 3]
[7, 3, 0, 2, 5, 1, 6, 4]
'''